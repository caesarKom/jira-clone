// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  password      String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Member        Member[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Workspaces {
  id         String  @id @default(uuid())
  name       String
  imageUrl   String?
  userId     String
  inviteCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Projects  Projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model Member {
  id          String     @id @default(uuid())
  userId      String
  role        MemberRole
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tasks Tasks[]
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Projects {
  id          String  @id @default(uuid())
  name        String
  workspaceId String
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks      Tasks[]
  workspaces Workspaces[]
}

model Tasks {
  id          String     @id @default(uuid())
  name        String
  assigneeId  String
  description String?
  workspaceId String
  dueDate     DateTime
  status      TaskStatus
  position    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  Projects  Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assignee Member @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}
